import os
from crewai import Agent, Task,Crew
from langchain_openai import ChatOpenAI
'''
Agent Model in CrewAI:
The Agent class in crewai represents an AI entity that has a specific role, goal, and backstory. Each agent uses an LLM (language model) to fulfill its defined responsibilities. Here’s a detailed look at how an agent works:
Role: The role helps define what the agent is supposed to do. It acts as a concise identifier for what kind of tasks the agent is expected to undertake. In this code, info_agent is assigned the role of "Market Analyst Bot". 
    This role is crucial as it provides a high-level description of what the agent is skilled at.
Goal: The goal parameter specifies the desired outcomes for the agent. In your example, the goal is "Provide real-time analysis of stock trends and identify short-term trading opportunities". This helps the agent focus on a 
    clear objective, guiding its interactions and decisions.
Backstory: The backstory gives a narrative context to the agent's skills, experience, and approach. It is useful for giving personality to the agent, especially when handling nuanced queries. In the provided backstory, 
    info_agent is described as a "seasoned financial analyst turned AI," which provides insight into the agent's expertise and why it can be trusted to identify market trends effectively.
llm Parameter: This links the agent to the language model (llm) that powers its responses. In this code, ChatOpenAI with the specified base URL (ollama/llama3) is used as the language model. This LLM is what the agent relies 
    on for generating insightful responses and executing its task effectively.

Task Class:
A Task in crewai is an objective assigned to an agent. It defines what needs to be accomplished by specifying what information or action is expected from the agent. Here's what each parameter does:
Description: This provides a detailed outline of the task that the agent needs to complete. In your code, the description is "Tell me all about the blue-ringed octopus." This is the question that info_agent will answer.
Expected Output: This parameter helps shape the response the agent is expected to deliver. In this case, the expected output specifies a "quick summary and 7 bullet points describing it." Providing a structured output expectation guides the agent to present the information in the desired format.
Agent: The agent parameter links the task to a specific agent. In this case, task1 is assigned to info_agent. This tells CrewAI that this particular task is to be completed by the specified agent.
Crew Class:

The Crew class acts as the orchestrator. It is responsible for managing agents and their respective tasks, enabling you to run everything smoothly. Here’s what each parameter does:
Agents: This is a list of agents involved in the crew. Here, only info_agent is included, but you could have multiple agents handling different tasks simultaneously.
Tasks: This parameter is a list of tasks assigned to the crew to accomplish. In this case, it contains a single task, task1, but multiple tasks can be assigned if needed.
Verbose: This is a flag to control the level of detail printed out during execution. Setting verbose=True allows for detailed logging, which is useful for debugging or understanding what is happening at each step of the process.
Running the Crew:

kickoff() Method: This method is used to execute the crew, which means that it will run all the tasks assigned to the agents listed in the crew. In this case, it triggers info_agent to handle task1.
Print Statements: After executing the tasks, the results are printed to show the output generated by the agents.
Importance of Each Component:
Agent: The agent is the most critical piece as it defines what skills the model has and guides it to focus on its specific responsibilities. This specialization makes it easy to create complex systems with multiple agents handling different parts of a workflow.
Task: Tasks direct the agents on what needs to be done. This makes the system modular—each task can be assigned, updated, or changed without affecting the agent’s core role.
Crew: The Crew acts like a task manager that coordinates the agents and tasks. By grouping agents and assigning them tasks, you ensure that everything runs in a structured and orderly way, with flexibility to add/remove agents or tasks dynamically.
Language Model (LLM): The llm drives the cognitive capabilities of the agent. By choosing the right model and setting its parameters, you can tweak how the agent responds and interacts based on the task requirements.
In the provided example, you essentially define an agent (info_agent) that is specialized as a market analyst. This agent is tasked with answering a specific question about the blue-ringed octopus to demonstrate its abilities. The Crew is responsible for executing this setup and returning the result.
Let me know if you want more detailed examples on how to build more complex agents or assign more sophisticated tasks related to trading!

'''

os.environ["OPENAI_API_KEY"] = "sk-prok-1111"

llm = ChatOpenAI(
    model="ollama/llama3",
    base_url = 'http://localhost:11434/v1', )



info_agent = Agent(
    role="Market Analyst Bot",
    goal="Provide real-time analysis of stock trends and identify short-term trading opportunities",
    backstory="""
        A seasoned financial analyst turned AI, your primary function is to keep a keen eye on daily 
        stock market movements. You have an impeccable track record in spotting trends and advising 
        on high-risk trades, which makes you a favorite among day traders.
    """,
    llm=llm
)

task1 = Task(
    description="Tell me all about the blue-ringed octopus.",
    expected_output="Give me a quick summary and then also give me 7 bullet points describing it.",
    agent=info_agent
)

crew = Crew(
    agents=[info_agent],
    tasks=[task1],
    verbose=True
)

result = crew.kickoff()

print("############")
print(result)